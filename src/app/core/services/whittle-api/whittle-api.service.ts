/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.3.0.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class WhittlerClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:44340";
    }

    register(registration: RegistrationModel): Observable<Whittler> {
        let url_ = this.baseUrl + "/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(registration);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(<any>response_);
                } catch (e) {
                    return <Observable<Whittler>><any>_observableThrow(e);
                }
            } else
                return <Observable<Whittler>><any>_observableThrow(response_);
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<Whittler> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Whittler.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Whittler>(<any>null);
    }

    profile(): Observable<WhittlerProfile> {
        let url_ = this.baseUrl + "/profile";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processProfile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processProfile(<any>response_);
                } catch (e) {
                    return <Observable<WhittlerProfile>><any>_observableThrow(e);
                }
            } else
                return <Observable<WhittlerProfile>><any>_observableThrow(response_);
        }));
    }

    protected processProfile(response: HttpResponseBase): Observable<WhittlerProfile> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WhittlerProfile.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WhittlerProfile>(<any>null);
    }

    whittles(): Observable<Whittle[]> {
        let url_ = this.baseUrl + "/whittles";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWhittles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWhittles(<any>response_);
                } catch (e) {
                    return <Observable<Whittle[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Whittle[]>><any>_observableThrow(response_);
        }));
    }

    protected processWhittles(response: HttpResponseBase): Observable<Whittle[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Whittle.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Whittle[]>(<any>null);
    }

    currentFork(): Observable<Fork> {
        let url_ = this.baseUrl + "/forks/current";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCurrentFork(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCurrentFork(<any>response_);
                } catch (e) {
                    return <Observable<Fork>><any>_observableThrow(e);
                }
            } else
                return <Observable<Fork>><any>_observableThrow(response_);
        }));
    }

    protected processCurrentFork(response: HttpResponseBase): Observable<Fork> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Fork.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Fork>(<any>null);
    }

    whittlerFork(left: boolean): Observable<Fork> {
        let url_ = this.baseUrl + "/forks/current/{left}";
        if (left === undefined || left === null)
            throw new Error("The parameter 'left' must be defined.");
        url_ = url_.replace("{left}", encodeURIComponent("" + left)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWhittlerFork(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWhittlerFork(<any>response_);
                } catch (e) {
                    return <Observable<Fork>><any>_observableThrow(e);
                }
            } else
                return <Observable<Fork>><any>_observableThrow(response_);
        }));
    }

    protected processWhittlerFork(response: HttpResponseBase): Observable<Fork> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Fork.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Fork>(<any>null);
    }

    matches(max: number | undefined, percentage: number | undefined): Observable<Comparison[]> {
        let url_ = this.baseUrl + "/matches?";
        if (max === null)
            throw new Error("The parameter 'max' cannot be null.");
        else if (max !== undefined)
            url_ += "max=" + encodeURIComponent("" + max) + "&"; 
        if (percentage === null)
            throw new Error("The parameter 'percentage' cannot be null.");
        else if (percentage !== undefined)
            url_ += "percentage=" + encodeURIComponent("" + percentage) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processMatches(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processMatches(<any>response_);
                } catch (e) {
                    return <Observable<Comparison[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Comparison[]>><any>_observableThrow(response_);
        }));
    }

    protected processMatches(response: HttpResponseBase): Observable<Comparison[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Comparison.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Comparison[]>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class WhittlersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:44340";
    }

    getWhittlers(): Observable<Whittler[]> {
        let url_ = this.baseUrl + "/whittlers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWhittlers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWhittlers(<any>response_);
                } catch (e) {
                    return <Observable<Whittler[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Whittler[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetWhittlers(response: HttpResponseBase): Observable<Whittler[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Whittler.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Whittler[]>(<any>null);
    }

    getWhittler(id: string | null): Observable<Whittler> {
        let url_ = this.baseUrl + "/whittlers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWhittler(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWhittler(<any>response_);
                } catch (e) {
                    return <Observable<Whittler>><any>_observableThrow(e);
                }
            } else
                return <Observable<Whittler>><any>_observableThrow(response_);
        }));
    }

    protected processGetWhittler(response: HttpResponseBase): Observable<Whittler> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Whittler.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Whittler>(<any>null);
    }

    getWhittlersWhittles(id: string | null): Observable<Whittle[]> {
        let url_ = this.baseUrl + "/whittlers/{id}/whittles";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWhittlersWhittles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWhittlersWhittles(<any>response_);
                } catch (e) {
                    return <Observable<Whittle[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Whittle[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetWhittlersWhittles(response: HttpResponseBase): Observable<Whittle[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Whittle.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Whittle[]>(<any>null);
    }

    getWhittlersMatches(id: string | null, maxNumMatches: number | undefined, percentage: number, max: string): Observable<Comparison[]> {
        let url_ = this.baseUrl + "/whittlers/{id}/matches/{max}/{percentage}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (percentage === undefined || percentage === null)
            throw new Error("The parameter 'percentage' must be defined.");
        url_ = url_.replace("{percentage}", encodeURIComponent("" + percentage)); 
        if (max === undefined || max === null)
            throw new Error("The parameter 'max' must be defined.");
        url_ = url_.replace("{max}", encodeURIComponent("" + max)); 
        if (maxNumMatches === null)
            throw new Error("The parameter 'maxNumMatches' cannot be null.");
        else if (maxNumMatches !== undefined)
            url_ += "maxNumMatches=" + encodeURIComponent("" + maxNumMatches) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWhittlersMatches(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWhittlersMatches(<any>response_);
                } catch (e) {
                    return <Observable<Comparison[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Comparison[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetWhittlersMatches(response: HttpResponseBase): Observable<Comparison[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Comparison.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Comparison[]>(<any>null);
    }
}

export class Whittler implements IWhittler {
    id?: string | undefined;
    numWhittles!: number;
    email?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    sexualOrientation?: string | undefined;

    constructor(data?: IWhittler) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.numWhittles = _data["numWhittles"];
            this.email = _data["email"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.sexualOrientation = _data["sexualOrientation"];
        }
    }

    static fromJS(data: any): Whittler {
        data = typeof data === 'object' ? data : {};
        let result = new Whittler();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["numWhittles"] = this.numWhittles;
        data["email"] = this.email;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["sexualOrientation"] = this.sexualOrientation;
        return data; 
    }
}

export interface IWhittler {
    id?: string | undefined;
    numWhittles: number;
    email?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    sexualOrientation?: string | undefined;
}

export class RegistrationModel implements IRegistrationModel {
    firstName!: string;
    lastName?: string | undefined;

    constructor(data?: IRegistrationModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
        }
    }

    static fromJS(data: any): RegistrationModel {
        data = typeof data === 'object' ? data : {};
        let result = new RegistrationModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        return data; 
    }
}

export interface IRegistrationModel {
    firstName: string;
    lastName?: string | undefined;
}

export class WhittlerProfile implements IWhittlerProfile {
    id?: string | undefined;
    numWhittles!: number;
    email?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    sexualOrientation?: string | undefined;
    isRegistered!: boolean;

    constructor(data?: IWhittlerProfile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.numWhittles = _data["numWhittles"];
            this.email = _data["email"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.sexualOrientation = _data["sexualOrientation"];
            this.isRegistered = _data["isRegistered"];
        }
    }

    static fromJS(data: any): WhittlerProfile {
        data = typeof data === 'object' ? data : {};
        let result = new WhittlerProfile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["numWhittles"] = this.numWhittles;
        data["email"] = this.email;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["sexualOrientation"] = this.sexualOrientation;
        data["isRegistered"] = this.isRegistered;
        return data; 
    }
}

export interface IWhittlerProfile {
    id?: string | undefined;
    numWhittles: number;
    email?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    sexualOrientation?: string | undefined;
    isRegistered: boolean;
}

export class Whittle implements IWhittle {
    forkHeight!: number;
    branchedLeft!: boolean;

    constructor(data?: IWhittle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.forkHeight = _data["forkHeight"];
            this.branchedLeft = _data["branchedLeft"];
        }
    }

    static fromJS(data: any): Whittle {
        data = typeof data === 'object' ? data : {};
        let result = new Whittle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["forkHeight"] = this.forkHeight;
        data["branchedLeft"] = this.branchedLeft;
        return data; 
    }
}

export interface IWhittle {
    forkHeight: number;
    branchedLeft: boolean;
}

export class Fork implements IFork {
    height!: number;
    leftBranch?: string | undefined;
    rightBranch?: string | undefined;

    constructor(data?: IFork) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.height = _data["height"];
            this.leftBranch = _data["leftBranch"];
            this.rightBranch = _data["rightBranch"];
        }
    }

    static fromJS(data: any): Fork {
        data = typeof data === 'object' ? data : {};
        let result = new Fork();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["height"] = this.height;
        data["leftBranch"] = this.leftBranch;
        data["rightBranch"] = this.rightBranch;
        return data; 
    }
}

export interface IFork {
    height: number;
    leftBranch?: string | undefined;
    rightBranch?: string | undefined;
}

export class Comparison implements IComparison {
    whittlerId?: string | undefined;
    whittlerFirstName?: string | undefined;
    similarity!: number;

    constructor(data?: IComparison) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.whittlerId = _data["whittlerId"];
            this.whittlerFirstName = _data["whittlerFirstName"];
            this.similarity = _data["similarity"];
        }
    }

    static fromJS(data: any): Comparison {
        data = typeof data === 'object' ? data : {};
        let result = new Comparison();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["whittlerId"] = this.whittlerId;
        data["whittlerFirstName"] = this.whittlerFirstName;
        data["similarity"] = this.similarity;
        return data; 
    }
}

export interface IComparison {
    whittlerId?: string | undefined;
    whittlerFirstName?: string | undefined;
    similarity: number;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}